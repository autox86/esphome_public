substitutions:
  device_name: andeca
  friendly_name: Licht

  #wifi domain to use, standard =  .local
  domain: .local
  
  #GPIO definitions
  io_boardled:    GPIO02
  io_ledt1:       GPIO16
  io_ledt2:       GPIO17
  io_ledt3:       GPIO18
  io_ledt4:       GPIO19
  io_ledt5:       GPIO21
  io_ledb1:       GPIO25
  io_ledb2:       GPIO26
  io_ledb3:       GPIO27
  io_ledb4:       GPIO14
  io_ledb5:       GPIO12
  io_button_1:     GPIO22
  io_button_2:     GPIO23
  io_button_3:     GPIO32
  io_button_4:     GPIO13
  io_button_5:     GPIO33
  
  #Lightoutput for button
  $sub_button1_light: light_led_b2
  $sub_button2_light: light_led_t2
  $sub_button3_light: light_led_t3 # Nicht angeschlossen
  $sub_button4_light: light_led_t3
  $sub_button5_light: light_ledt_part1

  #Name of Light according to board input: e.g Living Room
  T1: T1
  T2: Arbeitsplatte
  T3: HWR
  T4: Wohnzimmer Nord
  T5: Wohnzimmer SÃ¼d
  B1: B1
  B2: B2
  B3: B3
  B4: B4
  B5: B5
  Part1: Wohnzimmer
  CCT1: CCT1
  CCT2: CCT2
  sub_B1:  Taster 1 #Esstisch
  sub_B2:  Taster 2 #Arbeitsplatte insel
  sub_B3:  Taster 3 
  sub_B4:  Taster 4 #HWR
  sub_B5:  Taster 5 #Wohnzimmer

  #set intial brightness for the LEDs when turned on
  sub_intial_brightness: "50"

  #set max brightness for output as new 100% value
  sub_max_brightness: "80"

  #set frequency for LEDs
  sub_freqency: 9765Hz #19531Hz

  #set the transition time when dimming
  sub_but_transition: "0.1s"
  sub_def_transition: "1.5s"

  #toggle:subs
  sub_on_hold_30s:      script_force_ap

  #debounce specifications
  sub_default_debounce: "100"
  sub_min_debounce:     "50"
  sub_init_max_press: "600"

  #Set to "false" to have entities to show up in Home Assistant automatically
  sub_disable_ha:  "true"    


globals:
  - id: global_press_time #variable used to save time of button pressed
    type: int
    restore_value: no
    initial_value: '0'
  - id: global_dim_direction #variable for dimming --> True=brightening / False=Dimming
    type: bool
  - id: global_bright_intial #variable for dimming --> Inital value for brightning / dimming
    type: float
    restore_value: no
    initial_value: '50'
  - id: global_bright_percent #variable for dimming --> Current value for brightning / dimming
    type: float
    restore_value: no
    initial_value: '1'

# https://esphome.io/components/esphome.html#adjusting-flash-writes
preferences:
  # setting interval to 5 minutes since this defines writing total daily energy to flash, which will occur
  # every interval length 24/7/365.  Created a specific save script that is executed for things that need
  # to save more quickly.
  flash_write_interval: 5 hours

script:
  - id: script_setting_reboot # special reboot for static values
    mode: restart          
    then:
      - lambda: ESP_LOGCONFIG("andeca.yaml","Setting change requiring reboot detected, rebooting in 10 seconds to effect change.") ;
      - delay: 10s
      - button.press: restart_button

  - id: script_30s_timer
    then:
      - delay: !lambda return (30000-id(number_debounce).state);
      - script.execute: $sub_on_hold_30s

  - id: on_wifi_connect
    then:

        # wait until wifi connects
      - wait_until: wifi.connected

      - lambda: |-
          ESP_LOGI("Device on_boot","------------------->>>>>>>>>>>>>>>>>   wifi connected, cranking AccessPoint timeout back up to 3,5 weeks");
          wifi_wificomponent_id->set_ap_timeout(2147483647);

  - id: script_force_ap
    then:
      - logger.log: "------------------->>>>>>>>>>>>>>>>>   HELD BUTTON 30 SECONDS, FORCING AP"

      # overwrite software defined credentials to force ap to turn on.
      - lambda: wifi::global_wifi_component->save_wifi_sta("rescue_ap","safemysoul");

      # wait for 3s then restart to get captive portal to turn on.
      - delay: 3s
      - button.press: restart_button

  - id: script_do_nothing
    then:
    - lambda: return;

  - id: script_save_changes
    mode: restart
    then:
      - delay: 3s
      - lambda: |
          global_preferences->sync();

  - id: init_globals #script for intializing variables
      # priority: 500
    then:
    - lambda: 'id(global_bright_intial) = $sub_intial_brightness / 100.0;'

esphome:
  name: "${device_name}"
  platformio_options:
    board_build.flash_mode: dio
  project:
    name: "autox86.${device_name}"
    version: "1.0.0"
  on_boot:
    then:
      # implementing on_boot automation as a script makes it run in parallel
      # with any other on_boot scripts.
      - script.execute: on_wifi_connect
      - script.execute: init_globals
esp32:
  board: mhetesp32devkit
  framework:
    #if you change type from ESP-IDF to arduino or vice versa you MUST flash serial once. OTA will break ESP32
    type: arduino
    #type: esp-idf
    
#Including logger, esp8266, ota, api, wifi,web server section
<<: !include common/base/wifi.yaml

#Logger must be at least debug (default)
#debug:

logger:
  level: DEBUG
  #enable for serial debugging OFF
  #baud_rate: 0

#Sync time with Home Assistant
time:
  - platform: homeassistant
    id: homeassistant_time

number:
  - platform: template
    name: $device_name Debounce Time
    id: number_debounce
    icon: mdi:sort-clock-descending-outline
    min_value: $sub_min_debounce
    max_value: 250
    step: 1
    initial_value: $sub_default_debounce
    entity_category: config
    optimistic: true
    restore_value: true
    unit_of_measurement: "ms"
    mode: box
    disabled_by_default: $sub_disable_ha
    on_value:
      then:
        - script.execute: script_save_changes

  - platform: template
    name: $device_name Time to start Dimming
    id: number_dimming_time
    icon: mdi:timeline-clock-outline
    min_value: ${sub_init_max_press}
    max_value: 1500
    step: 1
    initial_value: 800
    entity_category: config
    optimistic: true
    restore_value: true
    unit_of_measurement: "ms"
    mode: box
    disabled_by_default: $sub_disable_ha
    on_value:
      then:
        - script.execute: script_save_changes

  - platform: template
    name: $device_name Intial Brightness
    id: number_init_dim
    icon: mdi:brightness-percent
    min_value: 0
    max_value: 80
    step: 1
    initial_value: $sub_intial_brightness
    entity_category: config
    optimistic: true
    restore_value: true
    unit_of_measurement: "%"
    mode: box
    disabled_by_default: $sub_disable_ha
    on_value:
      then:
        - script.execute: script_save_changes

  - platform: template
    name: $device_name Intial Brightness Kitchen
    id: number_init_dim_kitchen
    icon: mdi:brightness-percent
    min_value: 0
    max_value: 100
    step: 1
    initial_value: $sub_intial_brightness
    entity_category: config
    optimistic: true
    restore_value: true
    unit_of_measurement: "%"
    mode: box
    disabled_by_default: $sub_disable_ha
    on_value:
      then:
        - script.execute: script_save_changes

button:
  - <<: !include common/button/restart_button.yaml

sensor:
  - <<: !include common/sensor/wifi_signal.yaml
  - <<: !include common/sensor/uptime_raw.yaml
  
  #Sensor for displaying the time any button has been pressed
  - platform: template
    name: $device_name Button Press Duration
    id: sensor_press_duration
    entity_category: diagnostic
    disabled_by_default: $sub_disable_ha
    unit_of_measurement: ms
    icon: mdi:timer-outline

text_sensor:
  - <<: !include common/text_sensor/uptime_hr1.yaml
  - <<: !include common/text_sensor/version_esphome.yaml
  - <<: !include common/text_sensor/wifi_info.yaml

binary_sensor:
  - platform: gpio
    name: ${device_name}-$sub_B1
    id: button_1
    icon: mdi:light-switch-off
    disabled_by_default: $sub_disable_ha
    pin: 
      number: $io_button_1
      mode:
        input: true
        pullup: True
      inverted: true
    filters:
      - delayed_on: !lambda return id(number_debounce).state;
      - delayed_off: !lambda return id(number_debounce).state;
    on_press:
      then:
        #Storing the time of press received on raising edge / Reset Sensor to 0 / Output to Log the global_press_time
        - lambda: |-
            id(global_press_time) = millis();
            id(sensor_press_duration).publish_state(0);
            ESP_LOGI("info", "Global Press Time is: %f", id(global_press_time));
        #Delay is used to wait a defined time before the rest of the code is executed, delay is the time to wait before the dimming starts
        - delay: !lambda 'return id(number_dimming_time).state;' 
        - if:
            condition: 
              binary_sensor.is_on: button_1 # don't do a thing if not pressed long enough
            then:
              - while:
                  condition:
                    binary_sensor.is_on: button_1
                  then:
                    - if:
                        condition: 
                            lambda: |-
                              return id(global_dim_direction); //dim up or down
                        then:  
                          - light.dim_relative:
                              id: ${sub_button1_light}
                              relative_brightness: 3%
                              transition_length: ${sub_but_transition}
                          - delay: 0.1s
                          - lambda: |-
                              id(global_bright_percent) = id($sub_button1_light).current_values.get_brightness();
                              ESP_LOGI("info", "Brightness is: %f", id(global_bright_percent));
                              // invert dim direction if full on
                              if (id($sub_button1_light).current_values.get_brightness() >= 0.99) id(global_dim_direction) = false;

                        else:
                          - light.dim_relative:
                              id: $sub_button1_light
                              relative_brightness: -3%
                              transition_length: ${sub_but_transition}
                          - delay: 0.1s
                          - lambda: |-
                              id(global_bright_percent) = id($sub_button1_light).current_values.get_brightness();
                              ESP_LOGI("info", "Brightness is: %f", id(global_bright_percent)); 
                              if (id($sub_button1_light).current_values.get_brightness() <= 0.04) id(global_dim_direction) = true;                 
              - lambda: |-
                  id(global_dim_direction) = !id(global_dim_direction) ; // Change direction to global bool (true=brightening /false=dimming)
    on_release:
      then:
        #Updating Sensor Press Duration with the time of pressing the button
        - lambda: |-
            id(sensor_press_duration).publish_state(millis() - id(global_press_time) + id(number_debounce).state); // Publish sensor data for press duration 

    on_click:
      min_length: 50ms
      max_length: "${sub_init_max_press}ms"
      then:
        - if:
            condition:
              light.is_off: $sub_button1_light
            then:
              - lambda: |-
                  id($sub_button1_light).turn_on().perform();
                  id(global_bright_percent) = id($sub_button1_light).current_values.get_brightness();
                  ESP_LOGI("info", "Brightness is: %f", id(global_bright_percent));
                  id(global_dim_direction) = (true);  // make sure always dim up after turn on
            else:
              - lambda: |-
                  id($sub_button1_light).turn_off().perform();

  - platform: gpio
    name: ${device_name}-$sub_B2
    id: button_2
    icon: mdi:light-switch-off
    disabled_by_default: $sub_disable_ha
    pin: 
      number: $io_button_2
      mode:
        pullup: true
        input: true
      inverted: true
    filters:
      - delayed_on: !lambda return id(number_debounce).state;
      - delayed_off: !lambda return id(number_debounce).state;
    on_press:
      then:
        #Storing the time of press received on raising edge / Reset Sensor to 0 / Output to Log the global_press_time
        - lambda: |-
            id(global_press_time) = millis();
            id(sensor_press_duration).publish_state(0);
            ESP_LOGI("info", "Global Press Time is: %f", id(global_press_time));
        #Delay is used to wait a defined time before the rest of the code is executed, delay is the time to wait before the dimming starts
        - delay: !lambda 'return id(number_dimming_time).state;' 
        - if:
            condition: 
              binary_sensor.is_on: button_2 # don't do a thing if not pressed long enough
            then:
              - while:
                  condition:
                    binary_sensor.is_on: button_2
                  then:
                    - if:
                        condition: 
                            lambda: |-
                              return id(global_dim_direction); //dim up ?
                        then: 
                          - light.dim_relative:
                              id: $sub_button2_light
                              relative_brightness: 2%
                              transition_length: ${sub_but_transition}
                          - delay: 0.1s
                          - lambda: |-
                              id(global_bright_percent) = id($sub_button2_light).current_values.get_brightness();
                              ESP_LOGI("info", "Brightness is: %f", id(global_bright_percent));
                              // invert dim direction if full on
                              if (id($sub_button2_light).current_values.get_brightness() >= 0.99) id(global_dim_direction) = false;

                        else:
                          - light.dim_relative:
                              id: $sub_button2_light
                              relative_brightness: -2%
                              transition_length: ${sub_but_transition}
                          - delay: 0.1s
                          - lambda: |-
                              id(global_bright_percent) = id($sub_button2_light).current_values.get_brightness();
                              ESP_LOGI("info", "Brightness is: %f", id(global_bright_percent)); 
                              if (id($sub_button2_light).current_values.get_brightness() <= 0.04) id(global_dim_direction) = true;                 
              - lambda: |-
                  id(global_dim_direction) = !id(global_dim_direction) ; // Change direction to global bool (true=brightening /false=dimming)
    on_release:
      then:
        #Updating Sensor Press Duration with the time of pressing the button
        - lambda: |-
            id(sensor_press_duration).publish_state(millis() - id(global_press_time) + id(number_debounce).state); // Publish sensor data for press duration 

    on_click:
      min_length: 50ms
      max_length: "${sub_init_max_press}ms"
      then:
        - if:
            condition:
              light.is_off: $sub_button2_light
            then:
              - lambda: |-
                  id($sub_button2_light).turn_on().perform();
                  id(global_bright_percent) = id($sub_button2_light).current_values.get_brightness();
                  ESP_LOGI("info", "Brightness is: %f", id(global_bright_percent));
                  id(global_dim_direction) = (true);  // make sure always dim up after turn on
            else:
              - lambda: |-
                  id($sub_button2_light).turn_off().perform();    

  - platform: gpio
    name: ${device_name}-$sub_B3
    id: button_3
    icon: mdi:light-switch-off
    disabled_by_default: $sub_disable_ha
    pin: 
      number: $io_button_3
      mode:
        pullup: true
        input: true
      inverted: true
    filters:
      - delayed_on: !lambda return id(number_debounce).state;
      - delayed_off: !lambda return id(number_debounce).state;
    on_press:
      then:
        - lambda: |-
            // store time of press and clear duration sensor at raising edge (Button pressed)
            id(global_press_time) = millis();
            id(sensor_press_duration).publish_state(0);
            ESP_LOGI("info", "Global Press Time is: %f", id(global_press_time));
        #Delay is used to wait a defined time before the rest of the code is executed
        - delay: !lambda 'return id(number_dimming_time).state;' 
        - if:
            condition: 
              binary_sensor.is_on: button_3
              # don't do a thing if not pressed long enough
            then:
              - while:
                  condition:
                    binary_sensor.is_on: button_3
                  then:
                    - if:
                        condition: 
                            lambda: |-
                              return id(global_dim_direction);
                        then:  
                          - light.dim_relative:
                              id: $sub_button3_light
                              relative_brightness: 3%
                              transition_length: ${sub_but_transition}
                          - delay: 0.1s
                          - lambda: |-
                              id(global_bright_percent) = id($sub_button3_light).current_values.get_brightness();
                              ESP_LOGI("info", "Brightness is: %f", id(global_bright_percent));
                              // invert dim direction if full on
                              if (id($sub_button3_light).current_values.get_brightness() >= 0.99) id(global_dim_direction) = false;

                        else:
                          - light.dim_relative:
                              id: $sub_button3_light
                              relative_brightness: -3%
                              transition_length: ${sub_but_transition}
                          - delay: 0.1s
                          - lambda: |-
                              id(global_bright_percent) = id($sub_button3_light).current_values.get_brightness();
                              ESP_LOGI("info", "Brightness is: %f", id(global_bright_percent)); 
                              if (id($sub_button3_light).current_values.get_brightness() <= 0.04) id(global_dim_direction) = true;                 
              - lambda: |-
                  id(global_dim_direction) = !id(global_dim_direction) ; // Change direction to global bool (true=brightening /false=dimming)
    on_release:
      then:
        - lambda: |-
            id(sensor_press_duration).publish_state(millis() - id(global_press_time) + id(number_debounce).state); // Publish sensor data for press duration  

    on_click:
      min_length: 50ms
      max_length: "${sub_init_max_press}ms"
      then:
        - if:
            condition:
              light.is_off: $sub_button3_light
            then:
              - lambda: |-
                  id($sub_button3_light).turn_on().perform();
                  id(global_bright_percent) = id($sub_button3_light).current_values.get_brightness();
                  ESP_LOGI("info", "Brightness is: %f", id(global_bright_percent));
                  id(global_dim_direction) = (true);  // make sure always dim up after turn on
            else:
              - lambda: |-
                  id($sub_button3_light).turn_off().perform();

  - platform: gpio
    name: ${device_name}-$sub_B4
    id: button_4
    icon: mdi:light-switch-off
    disabled_by_default: $sub_disable_ha
    pin: 
      number: $io_button_4
      mode:
        input: true
        pullup: true
      inverted: true
    filters:
      - delayed_on: !lambda return id(number_debounce).state;
      - delayed_off: !lambda return id(number_debounce).state;
    on_press:
      then:
        - lambda: |-
            // store time of press and clear duration sensor at raising edge (Button pressed)
            id(global_press_time) = millis();
            id(sensor_press_duration).publish_state(0);
            ESP_LOGI("info", "Global Press Time is: %f", id(global_press_time));
        #Delay is used to wait a defined time before the rest of the code is executed
        - delay: !lambda 'return id(number_dimming_time).state;' 
        - if:
            condition: 
              binary_sensor.is_on: button_4
              # don't do a thing if not pressed long enough
            then:
              - while:
                  condition:
                    binary_sensor.is_on: button_4
                  then:
                    - if:
                        condition: 
                            lambda: |-
                              return id(global_dim_direction);
                        then:  
                          - light.dim_relative:
                              id: $sub_button4_light
                              relative_brightness: 3%
                              transition_length: ${sub_but_transition}
                          - delay: 0.1s
                          - lambda: |-
                              id(global_bright_percent) = id($sub_button4_light).current_values.get_brightness();
                              ESP_LOGI("info", "Brightness is: %f", id(global_bright_percent));
                              // invert dim direction if full on
                              if (id($sub_button4_light).current_values.get_brightness() >= 0.99) id(global_dim_direction) = false;

                        else:
                          - light.dim_relative:
                              id: $sub_button4_light
                              relative_brightness: -3%
                              transition_length: ${sub_but_transition}
                          - delay: 0.1s
                          - lambda: |-
                              id(global_bright_percent) = id($sub_button4_light).current_values.get_brightness();
                              ESP_LOGI("info", "Brightness is: %f", id(global_bright_percent)); 
                              if (id($sub_button4_light).current_values.get_brightness() <= 0.04) id(global_dim_direction) = true;                 
              - lambda: |-
                  id(global_dim_direction) = !id(global_dim_direction) ; // Change direction to global bool (true=brightening /false=dimming)
    on_release:
      then:
        - lambda: |-
            id(sensor_press_duration).publish_state(millis() - id(global_press_time) + id(number_debounce).state); // Publish sensor data for press duration  

    on_click:
      min_length: 50ms
      max_length: "${sub_init_max_press}ms"
      then:
        - if:
            condition:
              light.is_off: $sub_button4_light
            then:
              - lambda: |-
                  id($sub_button4_light).turn_on().perform();
                  id(global_bright_percent) = id($sub_button4_light).current_values.get_brightness();
                  ESP_LOGI("info", "Brightness is: %f", id(global_bright_percent));
                  id(global_dim_direction) = (true);  // make sure always dim up after turn on
            else:
              - lambda: |-
                  id($sub_button4_light).turn_off().perform();

  - platform: gpio
    name: ${device_name}-$sub_B5
    id: button_5
    icon: mdi:light-switch-off
    disabled_by_default: $sub_disable_ha
    pin: 
      number: $io_button_5
      mode:
        pullup: true
        input: true
      inverted: true
    filters:
      - delayed_on: !lambda return id(number_debounce).state;
      - delayed_off: !lambda return id(number_debounce).state;
    on_press:
      then:
        - lambda: |-
            // store time of press and clear duration sensor at raising edge (Button pressed)
            id(global_press_time) = millis();
            id(sensor_press_duration).publish_state(0);
            ESP_LOGI("info", "Global Press Time is: %f", id(global_press_time));
        #Delay is used to wait a defined time before the rest of the code is executed
        - delay: !lambda 'return id(number_dimming_time).state;' 
        - if:
            condition: 
              binary_sensor.is_on: button_5
              # don't do a thing if not pressed long enough
            then:
              - while:
                  condition:
                    binary_sensor.is_on: button_5
                  then:
                    - if:
                        condition: 
                            lambda: |-
                              return id(global_dim_direction);
                        then:  
                          - light.dim_relative:
                              id: $sub_button5_light
                              relative_brightness: 3%
                              transition_length: ${sub_but_transition}
                          - delay: 0.1s
                          - lambda: |-
                              id(global_bright_percent) = id($sub_button5_light).current_values.get_brightness();
                              ESP_LOGI("info", "Brightness is: %f", id(global_bright_percent));
                              // invert dim direction if full on
                              if (id($sub_button5_light).current_values.get_brightness() >= 0.99) id(global_dim_direction) = false;

                        else:
                          - light.dim_relative:
                              id: $sub_button5_light
                              relative_brightness: -3%
                              transition_length: ${sub_but_transition}
                          - delay: 0.1s
                          - lambda: |-
                              id(global_bright_percent) = id($sub_button5_light).current_values.get_brightness();
                              ESP_LOGI("info", "Brightness is: %f", id(global_bright_percent)); 
                              if (id($sub_button5_light).current_values.get_brightness() <= 0.04) id(global_dim_direction) = true;                 
              - lambda: |-
                  id(global_dim_direction) = !id(global_dim_direction) ; // Change direction to global bool (true=brightening /false=dimming)
    on_release:
      then:
        - lambda: |-
            id(sensor_press_duration).publish_state(millis() - id(global_press_time) + id(number_debounce).state); // Publish sensor data for press duration  

    on_click:
      min_length: 50ms
      max_length: "${sub_init_max_press}ms"
      then:
        - if:
            condition:
              light.is_off: $sub_button5_light
            then:
              - lambda: |-
                  id($sub_button5_light).turn_on().perform();
                  id(global_bright_percent) = id($sub_button5_light).current_values.get_brightness();
                  ESP_LOGI("info", "Brightness is: %f", id(global_bright_percent));
                  id(global_dim_direction) = (true);  // make sure always dim up after turn on
            else:
              - lambda: |-
                  id($sub_button5_light).turn_off().perform();

switch:
- platform: gpio
  name: "${device_name} Board LED"
  internal: True
  pin: $io_boardled
  inverted: True

output:
- platform: ledc
  pin: $io_ledt1
  frequency: $sub_freqency
  #zero_means_zero: true
  #max_power: "${sub_max_brightness}%"
  id: out_led_t1
- platform: ledc
  pin: $io_ledt2
  frequency: $sub_freqency
  #zero_means_zero: true
  #max_power: "${sub_max_brightness}%"
  id: out_led_t2
- platform: ledc
  pin: $io_ledt3
  #zero_means_zero: true
  max_power: "${sub_max_brightness}%"
  frequency: $sub_freqency
  id: out_led_t3
- platform: ledc
  pin: $io_ledt4
  #zero_means_zero: true
  max_power: "${sub_max_brightness}%"
  frequency: $sub_freqency
  id: out_led_t4
- platform: ledc
  pin: $io_ledt5
  #zero_means_zero: true
  max_power: "${sub_max_brightness}%"
  frequency: $sub_freqency
  id: out_led_t5
- platform: ledc
  pin: $io_ledb1
  #zero_means_zero: true
  max_power: "${sub_max_brightness}%"
  frequency: $sub_freqency
  id: out_led_b1
- platform: ledc
  pin: $io_ledb2
  #zero_means_zero: true
  max_power: "${sub_max_brightness}%"
  frequency: $sub_freqency
  id: out_led_b2
- platform: ledc
  pin: $io_ledb3
  #zero_means_zero: true
  max_power: "${sub_max_brightness}%"
  frequency: $sub_freqency
  id: out_led_b3
- platform: ledc
  pin: $io_ledb4
  #zero_means_zero: true
  max_power: "${sub_max_brightness}%"
  frequency: $sub_freqency
  id: out_led_b4
- platform: ledc
  pin: $io_ledb5
  #zero_means_zero: true
  max_power: "${sub_max_brightness}%"
  frequency: $sub_freqency
  id: out_led_b5
  
light:
- platform: partition
  name: "${friendly_name}-$Part1"
  id: light_ledt_part1
  icon: mdi:led-strip-variant
  segments:
    - single_light_id: light_led_t4
    - single_light_id: light_led_t5
  on_turn_on:
    light.turn_on:
      id: light_ledt_part1
      brightness: !lambda 'return id(number_init_dim).state*0.01;'
  on_turn_off:
    light.turn_off:
      id: light_ledt_part1 

- platform: monochromatic
  name: "${friendly_name}-${T1}"
  internal: true #not used yet
  icon: mdi:led-strip-variant
  id: light_led_t1
  default_transition_length: $sub_def_transition
  output: out_led_t1
  on_turn_on:
    light.turn_on:
      id: light_led_t1
      brightness: !lambda 'return id(number_init_dim).state*0.01;'
- platform: monochromatic
  name: "${friendly_name}-${T2}"
  icon: mdi:led-strip-variant
  id: light_led_t2
  default_transition_length: $sub_def_transition
  output: out_led_t2
  on_turn_on:
    light.turn_on:
      id: light_led_t2
      brightness: !lambda 'return id(number_init_dim_kitchen).state*0.01;'
- platform: monochromatic
  id: light_led_t3
  name: "${friendly_name}-${T3}"
  #internal: true 
  icon: mdi:led-strip-variant
  default_transition_length: $sub_def_transition
  output: out_led_t3
  on_turn_on:
    light.turn_on:
      id: light_led_t3
      brightness: !lambda 'return id(number_init_dim).state*0.01;'
- platform: monochromatic
  id: light_led_t4
  name: "${friendly_name}-${T4}"
  internal: True #light_leda_part1
  icon: mdi:led-strip-variant
  default_transition_length: $sub_def_transition
  output: out_led_t4
  # on_turn_on:
  #   light.turn_on:
  #     id: light_led_t4
  #     brightness: !lambda 'return id(number_init_dim).state*0.01;'
- platform: monochromatic
  id: light_led_t5
  name: "${friendly_name}-${T5}"
  internal: True #light_leda_part1
  icon: mdi:led-strip-variant
  default_transition_length: $sub_def_transition
  output: out_led_t5
  # on_turn_on:
  #   light.turn_on:
  #     id: light_led_t5
  #     brightness: !lambda 'return id(number_init_dim).state*0.01;'
- platform: monochromatic
  id: light_led_b1
  name: "${friendly_name}-${B1}"
  icon: mdi:led-strip-variant
  default_transition_length: $sub_def_transition
  output: out_led_b1
  on_turn_on:
    light.turn_on:
      id: light_led_b1
      brightness: !lambda 'return id(number_init_dim).state*0.01;'
- platform: monochromatic
  id: light_led_b2
  name: "${friendly_name}-${B2}"
  icon: mdi:led-strip-variant
  default_transition_length: $sub_def_transition
  output: out_led_b2
  on_turn_on:
    light.turn_on:
      id: light_led_b2
      brightness: !lambda 'return id(number_init_dim).state*0.01;'
- platform: monochromatic
  id: light_led_b3
  name: "${friendly_name}-${B3}"
  icon: mdi:led-strip-variant
  default_transition_length: $sub_def_transition
  output: out_led_b3
  on_turn_on:
    light.turn_on:
      id: light_led_b3
      brightness: !lambda 'return id(number_init_dim).state*0.01;'
- platform: monochromatic
  id: light_led_b4
  name: "${friendly_name}-${B4}"
  icon: mdi:led-strip-variant
  default_transition_length: $sub_def_transition
  output: out_led_b4
  on_turn_on:
    light.turn_on:
      id: light_led_b4
      brightness: !lambda 'return id(number_init_dim).state*0.01;'
- platform: monochromatic
  id: light_led_b5
  name: "${friendly_name}-${B5}"
  icon: mdi:led-strip-variant
  default_transition_length: $sub_def_transition
  output: out_led_b5
  on_turn_on:
    light.turn_on:
      id: light_led_b5
      brightness: !lambda 'return id(number_init_dim).state*0.01;'
# - platform: cwww
#   name: "${friendly_name}-${CCT1}"
#   icon: mdi:led-strip-variant
#   cold_white: out_led_t4
#   warm_white: out_led_t5
#   cold_white_color_temperature: 153 mireds
#   warm_white_color_temperature: 500 mireds
#   default_transition_length: $sub_def_transition
# - platform: cwww
#   name: "${friendly_name}-$CCT2}"
#   icon: mdi:led-strip-variant
#   cold_white: out_led_t4
#   warm_white: out_led_t5
#   cold_white_color_temperature: 153 mireds
#   warm_white_color_temperature: 500 mireds
#   default_transition_length: $sub_def_transition
